#!/usr/bin/python
import datetime
import urllib2
from RPLCD import CharLCD
import RPi.GPIO as GPIO
import httplib, urllib, os, glob, time

lcd = CharLCD(cols=20, rows=4, pin_rs=11, pin_e=13, pins_data=[29, 31, 33, 35])
os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')

base_dir = '/sys/bus/w1/devices/'
device_folder1 = glob.glob(base_dir + '28-0000067a5856*')[0]
device_file1 = device_folder1 + '/w1_slave'
device_folder2 = glob.glob(base_dir + '28-000007516168*')[0]
device_file2 = device_folder2 + '/w1_slave'

emoncms_url = "emoncms.org"
emonApiKey="3e12923d4cb41439190a903260c842ed"


def ledMode( PiPin, mode ):
  GPIO.setup( PiPin, GPIO.OUT )
  GPIO.output( PiPin, mode )
  return

def read_temp_raw1():
    f = open(device_file1, 'r')
    lines = f.readlines()
    f.close()
    return lines

def read_temp_raw2():
    f = open(device_file2, 'r')
    lines = f.readlines()
    f.close()
    return lines

def read_temp_c1():
    lines = read_temp_raw1()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = read_temp_raw1()
    equals_pos = lines[1].find('t=')
    if equals_pos != -1:
        temp_string = lines[1][equals_pos+2:]
        temp_c = int(temp_string) / 1000.0 - 0.5 # TEMP_STRING IS THE SENSOR OUTPUT, MAKE SURE IT'S AN INTEGER TO DO THE MATH
        temp_c = str(round(temp_c, 1)) # ROUND THE RESULT TO 1 PLACE AFTER THE DECIMAL, THEN CONVERT IT TO A STRING
        return temp_c

def read_temp_c2():
    lines = read_temp_raw2()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = read_temp_raw2()
    equals_pos = lines[1].find('t=')
    if equals_pos != -1:
        temp_string = lines[1][equals_pos+2:]
        temp_c = int(temp_string) / 1000.0 - 0.5 # TEMP_STRING IS THE SENSOR OU$
        temp_c = str(round(temp_c, 1)) # ROUND THE RESULT TO 1 PLACE AFTER THE $
        return temp_c

ledMode( 12, GPIO.HIGH )

while True:
   temp_ci = float(read_temp_c1())
   temp_co = float(read_temp_c2())
   if temp_ci<6:
    ledMode( 12, GPIO.LOW)
   else:
    if temp_ci>7:
     ledMode( 12, GPIO.HIGH)
   lcd.cursor_pos = (0, 0)
   lcd.write_string("%s" %time.strftime("%H:%M"))
   lcd.cursor_pos = (0, 10)
   lcd.write_string("%s" %time.strftime("%m/%d/%Y"))
   lcd.cursor_pos = (1, 6)
   lcd.write_string("HORTIPROD")
   lcd.cursor_pos = (2,3 )
   if temp_ci < 6:   
    lcd.write_string("IN   ON ")
   else: 
    lcd.write_string("IN   OFF ")
   lcd.cursor_pos = (2, 13)
   lcd.write_string("OUT")
   lcd.cursor_pos = (3, 1)
   print(read_temp_c1() + " C  IN      " + read_temp_c2() + " C OUT")
   lcd.write_string (read_temp_c1() + " C  ")
   lcd.cursor_pos = (3, 12)
   lcd.write_string (read_temp_c2() + " C  ") 
   Interior = float(read_temp_c1())
   Exterior = float(read_temp_c2())
   json2 = "{TempIn:" + "%.2f"%Interior
   json1 = "{TempOut:" + "%.2f"%Exterior
   # Prepare the URL 
   url  ="http://" + "emoncms.org" + "/" +  "input/post.json?node=0&apikey=" + emonApiKey + "&json=" + urllib2.quote(json1)
   urllib2.urlopen(url)
   url  ="http://" + "emoncms.org" + "/" +  "input/post.json?node=0&apikey=" + emonApiKey + "&json=" + urllib2.quote(json2)
   urllib2.urlopen(url)
   params = urllib.urlencode({'field1': temp_ci,'field2': temp_co, 'key':'E8VWW4LG7ZF5Y52F'})
   headers = {"Content-type": "application/x-www-form-urlencoded","Accept":   "text/plain"}
   conn = httplib.HTTPConnection("api.thingspeak.com:80")
   conn.request("POST", "/update", params, headers)
   response = conn.getresponse()  
   data = response.read()
   #print(data,response)
   conn.close()
  # time.sleep(1)
